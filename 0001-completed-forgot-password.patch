From 838887b40a85c08f3a2eea16622ca48674ae6e43 Mon Sep 17 00:00:00 2001
From: ajuuz <ajuuz07@gmail.com>
Date: Wed, 18 Jun 2025 16:05:58 +0530
Subject: [PATCH] completed forgot password

---
 api/.env                                      |   4 +-
 api/.gitignore                                |   2 +
 .../user/auth-controller.interface.ts         |   2 +
 .../blackListTokenRepository.interface.ts     |   7 ++
 .../user-repository.interface.ts              |   1 +
 .../tokenService.interface.ts                 |   3 +-
 .../forgotPasswordMailUsecase.interface.ts    |   7 ++
 .../forgotPasswordResetUsecase.interface.ts   |   5 +
 api/src/frameworks/di/repository.registry.ts  |   6 +
 api/src/frameworks/di/usecase.registory.ts    |  12 ++
 api/src/frameworks/http/server.ts             |   2 +-
 api/src/frameworks/redis/redisClient.ts       |  30 ++++-
 api/src/frameworks/routes/auth.ts             |   4 +
 api/src/index.ts                              |  10 +-
 .../controllers/auth/auth.controller.ts       |  25 ++++
 .../repositories/blackListToken.repository.ts |  23 ++++
 .../repositories/otp.repository.ts            |  14 +--
 .../services/token.service.ts                 |  29 +++++
 api/src/shared/config.ts                      |   6 +-
 api/src/shared/constants.ts                   |   8 ++
 api/src/shared/mailContentProvider.ts         |  83 ++++++++++++++
 api/src/shared/utils/bcryptHelper.ts          |   1 -
 .../auth/forgotPasswordMail.usecase.ts        |  42 +++++++
 .../auth/forgotPasswordReset.usecase.ts       |  62 ++++++++++
 api/src/useCases/auth/registerUser.usecase.ts |  16 +--
 api/src/useCases/auth/resendOtp.usecase.ts    |  16 +--
 .../mentor/acceptMentorApplication.usecase.ts |  29 +----
 .../mentor/rejectMentorApplication.usecase.ts |  30 +----
 client/.gitignore                             |   1 +
 .../src/components/common/TableComponent.tsx  |  10 +-
 .../config/axiosConfig/axiosInterceptor.ts    |   2 +-
 .../auth/ForgotPassword/ForgotSuccess.tsx     |  16 +++
 .../auth/ForgotPassword/PasswordReset.tsx     | 107 ++++++++++++++++++
 .../pages/auth/ForgotPassword/SendEmail.tsx   |  51 +++++++++
 .../auth/ForgotPassword/forgotPassword.css    |   9 ++
 client/src/pages/auth/Login.tsx               |   5 +-
 client/src/pages/auth/Otp.tsx                 |  16 ++-
 client/src/pages/auth/Signup.tsx              |   8 +-
 client/src/routes/UserRoutes.tsx              |   7 ++
 .../routes/protectedRoutes/ProtectedRoute.tsx |   2 +-
 client/src/services/authService.ts/authApi.ts |  21 +++-
 ...Validations.tsx => formDataValidation.tsx} |   4 +-
 42 files changed, 620 insertions(+), 118 deletions(-)
 create mode 100644 api/.gitignore
 create mode 100644 api/src/entities/repositoryInterfaces/blackListTokenRepository.interface.ts
 create mode 100644 api/src/entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface.ts
 create mode 100644 api/src/entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface.ts
 create mode 100644 api/src/interfaceAdapters/repositories/blackListToken.repository.ts
 create mode 100644 api/src/shared/mailContentProvider.ts
 create mode 100644 api/src/useCases/auth/forgotPasswordMail.usecase.ts
 create mode 100644 api/src/useCases/auth/forgotPasswordReset.usecase.ts
 create mode 100644 client/src/pages/auth/ForgotPassword/ForgotSuccess.tsx
 create mode 100644 client/src/pages/auth/ForgotPassword/PasswordReset.tsx
 create mode 100644 client/src/pages/auth/ForgotPassword/SendEmail.tsx
 create mode 100644 client/src/pages/auth/ForgotPassword/forgotPassword.css
 rename client/src/utils/validations/{signupValidations.tsx => formDataValidation.tsx} (91%)

diff --git a/api/.env b/api/.env
index e584859..ba8f066 100644
--- a/api/.env
+++ b/api/.env
@@ -1,16 +1,18 @@
 PORT=4000
 REDIS_URL="redis://default:gCmkq6GRgAZOavD5qHm0LRSTSU5Y6vTj@redis-19395.c273.us-east-1-2.ec2.redns.redis-cloud.com:19395"
 DATABASE_URI="mongodb://127.0.0.1:27017/meta-mentor"
-ORIGIN="http://localhost:5173"
+CLIENT_URI="http://localhost:5173"
 EMAIL_USER=ajuuz07@gmail.com
 EMAIL_PASS=yhcd riwi mqpv hkem
 CLOUD_NAME=ddyqatwyx
 CLOUD_API_KEY=538967275318759
 CLOUD_API_SECRET=w5BzWa0PYU6PEoim66sYcIs_U7Y
 
+FORGOT_PASSWORD_SECRET='dsk23k4j3h625kc9efnb9a44'
 ACCESS_TOKEN_SECRET='dsk23k4j3hjkjk2ljkdfdsjkfh234'
 REFRESH_TOKEN_SECRET='h3gj2k2b4mmd2km625kc9efnb9a44'
 JWT_ACCESS_EXPIRES_IN='1m'
 JWT_REFRESH_EXPIRES_IN="7d"
+FORGOT_PASSWORD_EXPIRES_IN="15m"
 
 NODE_ENV === "development";
\ No newline at end of file
diff --git a/api/.gitignore b/api/.gitignore
new file mode 100644
index 0000000..97aca2e
--- /dev/null
+++ b/api/.gitignore
@@ -0,0 +1,2 @@
+.env
+node_modules
\ No newline at end of file
diff --git a/api/src/entities/controllerInterfaces/user/auth-controller.interface.ts b/api/src/entities/controllerInterfaces/user/auth-controller.interface.ts
index ef5174e..f0ec886 100644
--- a/api/src/entities/controllerInterfaces/user/auth-controller.interface.ts
+++ b/api/src/entities/controllerInterfaces/user/auth-controller.interface.ts
@@ -6,6 +6,8 @@ export interface IAuthController {
     verifyOtp:(req:Request,res:Response,next:NextFunction)=>Promise<void>
     login:(req:Request,res:Response,next:NextFunction)=>Promise<void>
     resendOtp(req:Request,res:Response,next:NextFunction):Promise<void>
+    forgotPasswordSendMail(req:Request,res:Response,next:NextFunction):Promise<void>
+    forgotPasswordReset(req:Request,res:Response,next:NextFunction):Promise<void>
     tokenRefreshing(req:Request,res:Response,next:NextFunction):Promise<void>
 }
 
diff --git a/api/src/entities/repositoryInterfaces/blackListTokenRepository.interface.ts b/api/src/entities/repositoryInterfaces/blackListTokenRepository.interface.ts
new file mode 100644
index 0000000..5e451a5
--- /dev/null
+++ b/api/src/entities/repositoryInterfaces/blackListTokenRepository.interface.ts
@@ -0,0 +1,7 @@
+
+
+export interface IBlackListTokenRepository{
+    blacklistToken(fieldName:string,expiry:number,token:string):Promise<void>
+    getToken(fieldName:string):Promise<string|null>
+    removeToken(fieldName:string):Promise<void>
+}
\ No newline at end of file
diff --git a/api/src/entities/repositoryInterfaces/user-repository.interface.ts b/api/src/entities/repositoryInterfaces/user-repository.interface.ts
index 5bd5a3a..6533558 100644
--- a/api/src/entities/repositoryInterfaces/user-repository.interface.ts
+++ b/api/src/entities/repositoryInterfaces/user-repository.interface.ts
@@ -1,3 +1,4 @@
+import { IUserEntity } from "entities/modelEntities/user-model.entity";
 import { IUserModel } from "frameworks/database/models/user.model";
 import { SignupRequestDto } from "shared/dto/authDTO"
 import { UserUpdateDTO } from "shared/dto/userDTO";
diff --git a/api/src/entities/serviceInterfaces/tokenService.interface.ts b/api/src/entities/serviceInterfaces/tokenService.interface.ts
index ac3302c..4c58cb1 100644
--- a/api/src/entities/serviceInterfaces/tokenService.interface.ts
+++ b/api/src/entities/serviceInterfaces/tokenService.interface.ts
@@ -5,7 +5,8 @@ import { ROLES } from "shared/constants";
 
 
 export interface ITokenService{
-
+    generateForgotPasswordToken(email:string):string
+    verifyForgotPasswordToken(token:string):JwtPayload
     generateAccessToken(payload:{id:ObjectId,email:string,role:ROLES}):string;
     generateRefreshToken(payload:{id:ObjectId,email:string,role:ROLES}):string;
     verifyAccessToken(token:string):JwtPayload
diff --git a/api/src/entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface.ts b/api/src/entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface.ts
new file mode 100644
index 0000000..9078e7c
--- /dev/null
+++ b/api/src/entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface.ts
@@ -0,0 +1,7 @@
+
+
+
+export interface IForgotPasswordSendMailUsecase{
+
+    execute(email:string):Promise<void>
+}
\ No newline at end of file
diff --git a/api/src/entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface.ts b/api/src/entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface.ts
new file mode 100644
index 0000000..3ceed6f
--- /dev/null
+++ b/api/src/entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface.ts
@@ -0,0 +1,5 @@
+
+
+export interface IForgotPasswordResetUsecase{
+    execute(password:string,token:string):Promise<void>
+}
\ No newline at end of file
diff --git a/api/src/frameworks/di/repository.registry.ts b/api/src/frameworks/di/repository.registry.ts
index fc59443..d5e34f5 100644
--- a/api/src/frameworks/di/repository.registry.ts
+++ b/api/src/frameworks/di/repository.registry.ts
@@ -6,6 +6,8 @@ import { UserRepository } from "interfaceAdapters/repositories/user.repository";
 import { StudentRepository } from "interfaceAdapters/repositories/student.repository";
 import { MentorRepository } from "interfaceAdapters/repositories/mentor.repository";
 import { IMentorRepository } from "entities/repositoryInterfaces/mentorRepository.interface";
+import { IBlackListTokenRepository } from "entities/repositoryInterfaces/blackListTokenRepository.interface";
+import { BlackListTokenRepository } from "interfaceAdapters/repositories/blackListToken.repository";
 
 export class RepositoryRegistry{
     static registerRepositories():void{
@@ -13,6 +15,10 @@ export class RepositoryRegistry{
         container.register<IOtpRespository>("IOtpRepository",{
             useClass:OtpRepository
         })
+
+        container.register<IBlackListTokenRepository>('IBlackListTokenRepository',{
+            useClass:BlackListTokenRepository
+        })
         
         container.register<IUserRespository>('IUserRepository',{
             useClass:UserRepository
diff --git a/api/src/frameworks/di/usecase.registory.ts b/api/src/frameworks/di/usecase.registory.ts
index 0a020ca..bb23fe0 100644
--- a/api/src/frameworks/di/usecase.registory.ts
+++ b/api/src/frameworks/di/usecase.registory.ts
@@ -29,6 +29,10 @@ import { ITokenRefreshingUsecase } from "entities/usecaseInterfaces/auth/tokenRe
 import { TokenRefreshingUsecase } from "useCases/auth/tokenRefreshing.usecase";
 import { IResendOtpUsecase } from "entities/usecaseInterfaces/auth/resendOtpUsecase.interface";
 import { ResendOtpUsecase } from "useCases/auth/resendOtp.usecase";
+import { IForgotPasswordSendMailUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface";
+import { ForgotPasswordSendMailUsecase } from "useCases/auth/forgotPasswordMail.usecase";
+import { IForgotPasswordResetUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface";
+import { ForgotPasswordResetUsecase } from "useCases/auth/forgotPasswordReset.usecase";
 // import { IGetLoggedInUserUsecase } from "entities/usecaseInterfaces/auth/getLoggedInUserUsecase.interface";
 // import { GetLoggedInUserUsecase } from "useCases/auth/getLoggedInUser.usecase";
 
@@ -52,6 +56,14 @@ export class UseCaseRegistory{
             useClass:LoginUsecase
         })
 
+        container.register<IForgotPasswordSendMailUsecase>('IForgotPasswordSendMailUsecase',{
+            useClass:ForgotPasswordSendMailUsecase
+        })
+
+        container.register<IForgotPasswordResetUsecase>('IForgotPasswordResetUsecase',{
+            useClass:ForgotPasswordResetUsecase
+        })
+
         container.register<ITokenRefreshingUsecase>('ITokenRefreshingUsecase',{
             useClass:TokenRefreshingUsecase
         })
diff --git a/api/src/frameworks/http/server.ts b/api/src/frameworks/http/server.ts
index f0ced55..d8b2e48 100644
--- a/api/src/frameworks/http/server.ts
+++ b/api/src/frameworks/http/server.ts
@@ -27,7 +27,7 @@ export class App{
 
     private configureMiddleware():void{
         this._app.use(cors({
-        origin: config.origin.uri, 
+        origin: config.client.uri, 
         credentials: true     
         }));
         this._app.use(cookieParser())
diff --git a/api/src/frameworks/redis/redisClient.ts b/api/src/frameworks/redis/redisClient.ts
index 05ea14d..2b65ae8 100644
--- a/api/src/frameworks/redis/redisClient.ts
+++ b/api/src/frameworks/redis/redisClient.ts
@@ -1,17 +1,35 @@
-import { createClient } from "redis";
+import { createClient, RedisClientType } from "redis";
 import { config } from "shared/config";
 
 
 export class RedisClient{
 
-    static async connectRedis(){
-        const redisClient= createClient({
+    private static client:RedisClientType|null=null;
+
+    static async connectRedis():Promise<void>{
+        RedisClient.client=createClient({
             url:config.redis.URL
         })
-        redisClient.on('error',(err)=>console.error('Redis Client error',err));
-        await redisClient.connect()
 
-        return redisClient;
+        RedisClient.client.on("error", (err) => {console.error("Redis Client Error", err)});
+        await RedisClient.client.connect();
+    }
+
+    static async getClient():Promise<RedisClientType>{
+         if (!RedisClient.client) {
+           await RedisClient.connectRedis()
+        }
+        return RedisClient.client!
     }
 
+    // static async connectRedis(){
+    //     const redisClient= createClient({
+    //         url:config.redis.URL
+    //     })
+    //     redisClient.on('error',(err)=>console.error('Redis Client error',err));
+    //     await redisClient.connect()
+
+    //     return redisClient;
+    // }
+
 }
\ No newline at end of file
diff --git a/api/src/frameworks/routes/auth.ts b/api/src/frameworks/routes/auth.ts
index 5294e05..904f048 100644
--- a/api/src/frameworks/routes/auth.ts
+++ b/api/src/frameworks/routes/auth.ts
@@ -23,6 +23,10 @@ export class AuthRoutes {
 
         this._router.post('/otp/resend',authController.resendOtp.bind(authController))
 
+        this._router.post('/forgotPassword/mail',authController.forgotPasswordSendMail.bind(authController))
+
+        this._router.patch('/forgotPassword/reset',authController.forgotPasswordReset.bind(authController))
+
         this._router.post('/refresh',authController.tokenRefreshing.bind(authController))
     }
 
diff --git a/api/src/index.ts b/api/src/index.ts
index 9ddc678..82f2579 100644
--- a/api/src/index.ts
+++ b/api/src/index.ts
@@ -2,11 +2,17 @@ import 'reflect-metadata';
 import { App } from "frameworks/http/server.js";
 import { MongoConnect } from "frameworks/database/mongoDB/mongoConnect.js";
 import { config } from "shared/config.js";
-
+import { RedisClient } from 'frameworks/redis/redisClient';
 const app = new App();
 const mongoConnect = new MongoConnect();
 
-mongoConnect.connectDB();
+mongoConnect.connectDB()
+.then(()=>console.log("mongodb connected"))
+.catch((error)=>console.error(error))
+
+RedisClient.connectRedis()
+.then(()=>console.log('redis connected'))
+.catch(error=>console.log(error))
 
 app
   .getApp()
diff --git a/api/src/interfaceAdapters/controllers/auth/auth.controller.ts b/api/src/interfaceAdapters/controllers/auth/auth.controller.ts
index 6f6399a..1bdc6f8 100644
--- a/api/src/interfaceAdapters/controllers/auth/auth.controller.ts
+++ b/api/src/interfaceAdapters/controllers/auth/auth.controller.ts
@@ -1,4 +1,6 @@
 import { IAuthController } from "entities/controllerInterfaces/user/auth-controller.interface";
+import { IForgotPasswordSendMailUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface";
+import { IForgotPasswordResetUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface";
 // import { IGetLoggedInUserUsecase } from "entities/usecaseInterfaces/auth/getLoggedInUserUsecase.interface";
 import { ILoginUsecase } from "entities/usecaseInterfaces/auth/loginUsecase.interface";
 import { IRegisterUserUsecase } from "entities/usecaseInterfaces/auth/registerUsecase.interface";
@@ -32,6 +34,12 @@ export class AuthController implements IAuthController{
         @inject('IResendOtpUsecase')
         private _resendOtpUsecase:IResendOtpUsecase,
 
+        @inject('IForgotPasswordSendMailUsecase')
+        private _forgotPasswordSendMailUsecase:IForgotPasswordSendMailUsecase,
+
+        @inject('IForgotPasswordResetUsecase')
+        private _forgotPasswordResetUsecase:IForgotPasswordResetUsecase,
+
         @inject("ITokenRefreshingUsecase")
         private _tokenRefreshingUsecase:ITokenRefreshingUsecase,
     ){}
@@ -91,6 +99,21 @@ export class AuthController implements IAuthController{
         res.status(200).json({success:true,message:"otp has been resended successfully"})
     }
 
+
+    async forgotPasswordSendMail(req:Request,res:Response,next:NextFunction):Promise<void>{
+        const {email} = req.body;
+        await this._forgotPasswordSendMailUsecase.execute(email)
+        res.status(200).json({success:true,message:"Password reset link has been send to your mail id"})
+    }
+
+    async forgotPasswordReset(req:Request,res:Response,next:NextFunction):Promise<void>{
+        const {password,token} = req.body;
+        console.log("here req comes")
+        await this._forgotPasswordResetUsecase.execute(password,token);
+        res.status(200).json({success:true,message:'Password changed successfully'})
+    }
+
+
     async tokenRefreshing(req:Request,res:Response,next:NextFunction):Promise<void>{
         const refreshToken = req.cookies.refreshToken;
         const accessToken=this._tokenRefreshingUsecase.execute(refreshToken)
@@ -98,5 +121,7 @@ export class AuthController implements IAuthController{
         res.status(200).json({success:true,message:"token refreshed successfully"})
     }
 
+
+
     
 }
\ No newline at end of file
diff --git a/api/src/interfaceAdapters/repositories/blackListToken.repository.ts b/api/src/interfaceAdapters/repositories/blackListToken.repository.ts
new file mode 100644
index 0000000..dae7664
--- /dev/null
+++ b/api/src/interfaceAdapters/repositories/blackListToken.repository.ts
@@ -0,0 +1,23 @@
+import { IBlackListTokenRepository } from "entities/repositoryInterfaces/blackListTokenRepository.interface";
+import { RedisClient } from "frameworks/redis/redisClient";
+import { injectable } from "tsyringe";
+
+
+@injectable()
+export class BlackListTokenRepository implements IBlackListTokenRepository{
+
+     async blacklistToken(fieldName:string,expiry:number,token:string):Promise<void>{
+        const redisClient = await RedisClient.getClient();
+        await redisClient.setEx(fieldName,expiry,token)
+    }
+
+    async getToken(fieldName:string):Promise<string|null>{
+        const redisClient = await RedisClient.getClient();
+        return await redisClient.get(fieldName)
+    }
+
+    async removeToken(fieldName:string):Promise<void>{
+        const redisClient = await RedisClient.getClient();
+        await redisClient.del(fieldName)
+    }
+}
\ No newline at end of file
diff --git a/api/src/interfaceAdapters/repositories/otp.repository.ts b/api/src/interfaceAdapters/repositories/otp.repository.ts
index 4517e03..26ec20c 100644
--- a/api/src/interfaceAdapters/repositories/otp.repository.ts
+++ b/api/src/interfaceAdapters/repositories/otp.repository.ts
@@ -1,6 +1,4 @@
-import { IOtpEntity } from "entities/modelEntities/otp-model.entity";
 import { IOtpRespository } from "entities/repositoryInterfaces/otp-repository.interface";
-import { otpDB } from "frameworks/database/models/otp.model";
 import { RedisClient } from "frameworks/redis/redisClient";
 import { injectable } from "tsyringe";
 
@@ -8,18 +6,18 @@ import { injectable } from "tsyringe";
 export class OtpRepository implements IOtpRespository {
 
     public async saveOtp(email: string, otp: string): Promise<void> {
-        const redisClient =await RedisClient.connectRedis()
-        await redisClient.setEx(`${email}`,100,otp)
+        const redisClient =await RedisClient.getClient()
+        await redisClient.setEx(`otp:${email}`,60,otp)
     }
     
     public async getOtp(email: string):Promise<string|null>{
-        const redisClient =await RedisClient.connectRedis()
-        const otp = await redisClient.get(email);
+        const redisClient =await RedisClient.getClient()
+        const otp = await redisClient.get(`otp:${email}`);
         return otp;
     }
     
     public async deleteOtp(email: string): Promise<void> {
-        const redisClient=await RedisClient.connectRedis()
-        await redisClient.del(email)
+        const redisClient=await RedisClient.getClient()
+        await redisClient.del(`otp:${email}`)
     }
 }
\ No newline at end of file
diff --git a/api/src/interfaceAdapters/services/token.service.ts b/api/src/interfaceAdapters/services/token.service.ts
index 320e946..e6d0e6b 100644
--- a/api/src/interfaceAdapters/services/token.service.ts
+++ b/api/src/interfaceAdapters/services/token.service.ts
@@ -15,14 +15,43 @@ export class TokenService implements ITokenService{
     private _accessExpiresIn:string
     private _refreshSecretKey:Secret
     private _refreshExpiresIn:string
+    private _forgotPasswordSecretKey:Secret
+    private _forgotPasswordExpiresIn:string
 
     constructor(){
+        this._forgotPasswordSecretKey=config.jwt.FORGOT_PASSWORD_SECRET_KEY
+        this._forgotPasswordExpiresIn=config.jwt.FORGOT_PASSWORD_EXPIRES_IN
         this._accessSecretKey=config.jwt.ACCESS_SECRET_KEY
         this._accessExpiresIn=config.jwt.ACCESS_EXPIRES_IN
         this._refreshSecretKey=config.jwt.REFRESH_SECRET_KEY
         this._refreshExpiresIn=config.jwt.REFRESH_EXPIRES_IN
     }
 
+
+    generateForgotPasswordToken(email:string):string{
+        const token = jwt.sign({email},this._forgotPasswordSecretKey,{
+            expiresIn:this._forgotPasswordExpiresIn as ms.StringValue
+        })
+        return token
+    }
+
+    verifyForgotPasswordToken(token:string):JwtPayload{
+        try{
+            const decode = jwt.verify(token,this._forgotPasswordSecretKey)
+            return decode as JwtPayload
+        }
+        catch(error){
+             if(error instanceof Error){
+                    if(error.name==="TokenExpiredError"){
+                        throw new CustomError(HTTP_STATUS.UNAUTHORIZED,ERROR_MESSAGE.TOKEN_EXPIRED_FORGOT)
+                    }else if(error.name==="JsonWebTokenError"){
+                        throw new CustomError(HTTP_STATUS.UNAUTHORIZED,ERROR_MESSAGE.INVALID_TOKEN)
+                    }
+                }
+            throw new CustomError(HTTP_STATUS.UNAUTHORIZED,ERROR_MESSAGE.UNAUTHORIZED_ACCESS)
+        }
+    }
+
      generateAccessToken(payload:{id:ObjectId,email:string,role:ROLES}):string{
         const token = jwt.sign(payload,this._accessSecretKey,{
             expiresIn:this._accessExpiresIn as ms.StringValue
diff --git a/api/src/shared/config.ts b/api/src/shared/config.ts
index 064a89e..d2352a7 100644
--- a/api/src/shared/config.ts
+++ b/api/src/shared/config.ts
@@ -5,8 +5,8 @@ export const config={
     server:{
         PORT : process.env.PORT || 5000
     },
-    origin:{
-        uri:  process.env.ORIGIN || 'http://localhost:5173'
+    client:{
+        uri:  process.env.CLIENT_URI || 'http://localhost:5173'
     },
     database:{
         URI : process.env.DATABASE_URI || "mongodb://localhost:27017/meta-mentor"
@@ -20,6 +20,8 @@ export const config={
     },
 
     jwt:{
+        FORGOT_PASSWORD_SECRET_KEY:process.env.FORGOT_PASSWORD_SECRET || 'forgot-secret-key',
+        FORGOT_PASSWORD_EXPIRES_IN:process.env.FORGOT_PASSWORD_EXPIRES_IN || '15m',
         ACCESS_SECRET_KEY:process.env.ACCESS_TOKEN_SECRET || "access-secret-key",
         ACCESS_EXPIRES_IN: process.env.JWT_ACCESS_EXPIRES_IN || "1m",
         REFRESH_SECRET_KEY:process.env.REFRESH_TOKEN_SECRET || "refresh-scret-key",
diff --git a/api/src/shared/constants.ts b/api/src/shared/constants.ts
index c6c76c5..d19db64 100644
--- a/api/src/shared/constants.ts
+++ b/api/src/shared/constants.ts
@@ -29,6 +29,7 @@ export const ERROR_MESSAGE={
   UNAUTHORIZED_ACCESS_NOT_LOGIN:"Unauthorized access. You have'nt Logged in",
   UNAUTHORIZED_ACCESS:"Unauthorized access.",
   INVALID_TOKEN:"Access Denied due to Invalid token",
+  TOKEN_EXPIRED_FORGOT:"Link Validity Expired. Try verify email once more",
   TOKEN_EXPIRED_ACCESS:"Access Token time out",
   TOKEN_EXPIRED_REFRESH:"Token time out, Please loggin again",
   SERVER_ERROR:"An error occurred, please try again later.",
@@ -43,4 +44,11 @@ export enum MENTOR_APPLICATION_STATUS{
 
 export enum EVENT_EMITTER_TYPE{
     SENDMAIL='sendmail'
+}
+
+export enum MAIL_CONTENT_PURPOSE{
+  OTP='otp',
+  MENTOR_ACCEPTANCE='mentorAcceptance',
+  MENTOR_REJECTION='mentorRejection',
+  FORGOT_PASSWORD='forgotPassword'
 }
\ No newline at end of file
diff --git a/api/src/shared/mailContentProvider.ts b/api/src/shared/mailContentProvider.ts
new file mode 100644
index 0000000..f292ac2
--- /dev/null
+++ b/api/src/shared/mailContentProvider.ts
@@ -0,0 +1,83 @@
+import { config } from "./config";
+import { MAIL_CONTENT_PURPOSE } from "./constants";
+
+export function mailContentProvider(purpose:string,data?:any):string{
+
+    const {OTP,MENTOR_ACCEPTANCE,MENTOR_REJECTION,FORGOT_PASSWORD}=MAIL_CONTENT_PURPOSE
+    switch(purpose){
+        case OTP:
+          return `<div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
+            <h2 style="text-align: center; color: #333;">🔐 OTP Verification</h2>
+            <p style="font-size: 16px; color: #555;">Hi there,</p>
+            <p style="font-size: 16px; color: #555;">Use the following OTP to complete your signup process:</p>
+            <div style="text-align: center; margin: 30px 0;">
+              <span style="display: inline-block; font-size: 24px; background-color: #4f46e5; color: white; padding: 12px 24px; border-radius: 8px; font-weight: bold; letter-spacing: 3px;">${data}</span>
+            </div>
+            <p style="font-size: 14px; color: #888;">⚠️ This code is valid for 1 minutes. Please do not share it with anyone.</p>
+            <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— Meta Mentor Team</p>
+          </div>
+            `;
+        
+        case MENTOR_ACCEPTANCE:
+            return `<div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
+                         <h2 style="text-align: center; color: #333;">🎉 Welcome Aboard, Mentor!</h2>
+                         <p style="font-size: 16px; color: #555;">Dear Mentor,</p>
+                         <p style="font-size: 16px; color: #555;">
+                           Congratulations! Your application to become a mentor on <strong>Meta Mentor</strong> has been officially accepted.
+                         </p>
+                         <p style="font-size: 16px; color: #555;">
+                           We are thrilled to have someone of your caliber join our community of educators and changemakers. Your knowledge, experience, and dedication will surely inspire many.
+                         </p>
+                         <div style="text-align: center; margin: 30px 0;">
+                           <span style="display: inline-block; font-size: 18px; background-color: #16a34a; color: white; padding: 12px 20px; border-radius: 8px; font-weight: bold;">
+                             You're officially a Meta Mentor! 🌟
+                           </span>
+                         </div>
+                         <p style="font-size: 14px; color: #666;">
+                           Your profile is now active, and students can soon start connecting with you. Get ready to make a difference!
+                         </p>
+                         <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— The Meta Mentor Team</p>
+                    </div>`;
+            
+            case MENTOR_REJECTION:
+                return `
+                     <div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #fff9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
+                      <h2 style="text-align: center; color: #d32f2f;">❌ Application Update</h2>
+                      <p style="font-size: 16px; color: #555;">Dear Applicant,</p>
+                      <p style="font-size: 16px; color: #555;">
+                        Thank you for your interest in becoming a mentor with <strong>Meta Mentor</strong>. After carefully reviewing your application, we regret to inform you that it has not been approved at this time.
+                      </p>
+                      <p style="font-size: 16px; color: #555;">
+                        Please know that this decision was not easy. While we truly value your effort and enthusiasm, we believe that there may be other ways for you to grow and engage with our community in the future.
+                      </p>
+                      <div style="text-align: center; margin: 30px 0;">
+                        <span style="display: inline-block; font-size: 16px; background-color: #fef3c7; color: #92400e; padding: 10px 20px; border-radius: 6px;">
+                          We encourage you to apply again after gaining more experience or refining your profile.<br/>
+                          Reason : ${data}
+                        </span>
+                      </div>
+                      <p style="font-size: 14px; color: #666;">
+                        We sincerely appreciate your interest and wish you continued success in all your endeavors.
+                      </p>
+                      <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— The Meta Mentor Team</p>
+                     </div>
+                    `;
+
+            case FORGOT_PASSWORD:
+                return `<div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
+                          <h2 style="text-align: center; color: #333;">🔐 Password Reset Request</h2>
+                          <p style="font-size: 16px; color: #555;">Hi there,</p>
+                          <p style="font-size: 16px; color: #555;">We received a request to reset your password. Click the button below to proceed:</p>
+                          <div style="text-align: center; margin: 30px 0;">
+                            <a href="${config.client.uri}/forgotPassword/reset/${data}" style="background-color: #4f46e5; color: white; padding: 12px 24px; border-radius: 8px; font-weight: bold; text-decoration: none; font-size: 16px;">Reset Password</a>
+                          </div>
+                          <p style="font-size: 14px; color: #888;">⚠️ This link will expire in 15 minutes. If you did not request a password reset, please ignore this email.</p>
+                          <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— Meta Mentor Team</p>
+                        </div>
+                        `;
+
+            default:
+                return ""
+
+    }
+}
diff --git a/api/src/shared/utils/bcryptHelper.ts b/api/src/shared/utils/bcryptHelper.ts
index 5a15a8e..22f4057 100644
--- a/api/src/shared/utils/bcryptHelper.ts
+++ b/api/src/shared/utils/bcryptHelper.ts
@@ -1,4 +1,3 @@
-
 import bcrypt from 'bcrypt'
 
 export const hashPassword=async(password:string):Promise<string>=>{
diff --git a/api/src/useCases/auth/forgotPasswordMail.usecase.ts b/api/src/useCases/auth/forgotPasswordMail.usecase.ts
new file mode 100644
index 0000000..baa278e
--- /dev/null
+++ b/api/src/useCases/auth/forgotPasswordMail.usecase.ts
@@ -0,0 +1,42 @@
+import { IOtpRespository } from "entities/repositoryInterfaces/otp-repository.interface";
+import { IUserRespository } from "entities/repositoryInterfaces/user-repository.interface";
+import { IEmailService } from "entities/serviceInterfaces/email-service.interface";
+import { ITokenService } from "entities/serviceInterfaces/tokenService.interface";
+import { IForgotPasswordSendMailUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordMailUsecase.interface";
+import { config } from "shared/config";
+import { EVENT_EMITTER_TYPE, MAIL_CONTENT_PURPOSE } from "shared/constants";
+import { eventBus } from "shared/eventBus";
+import { mailContentProvider } from "shared/mailContentProvider";
+import { NotFoundError } from "shared/utils/error/notFounError";
+import { ValidationError } from "shared/utils/error/validationError";
+import { inject, injectable } from "tsyringe";
+
+
+
+@injectable()
+export class ForgotPasswordSendMailUsecase implements IForgotPasswordSendMailUsecase{
+
+    constructor(
+        @inject('IUserRepository')
+        private _userRepository:IUserRespository,
+
+        @inject("ITokenService")
+        private _tokenService:ITokenService,
+
+        @inject('IEmailService')
+        private _emailService:IEmailService
+    ){}
+
+   async execute(email:string):Promise<void>{
+        if(!email) throw new ValidationError("Email is required")
+
+        const user = await this._userRepository.findByEmail(email)
+
+        if(!user || !user.isVerified) throw new NotFoundError("User not found");
+
+        const token = this._tokenService.generateForgotPasswordToken(email)
+         const html=mailContentProvider(MAIL_CONTENT_PURPOSE.FORGOT_PASSWORD,token)
+        
+        await this._emailService.sendMail(email,"Password Reset Request",html)
+   }
+}
\ No newline at end of file
diff --git a/api/src/useCases/auth/forgotPasswordReset.usecase.ts b/api/src/useCases/auth/forgotPasswordReset.usecase.ts
new file mode 100644
index 0000000..77c1576
--- /dev/null
+++ b/api/src/useCases/auth/forgotPasswordReset.usecase.ts
@@ -0,0 +1,62 @@
+import { IBlackListTokenRepository } from "entities/repositoryInterfaces/blackListTokenRepository.interface";
+import { IUserRespository } from "entities/repositoryInterfaces/user-repository.interface";
+import { ITokenService } from "entities/serviceInterfaces/tokenService.interface";
+import { IForgotPasswordResetUsecase } from "entities/usecaseInterfaces/auth/forgotPasswordResetUsecase.interface";
+import { JwtPayload } from "jsonwebtoken";
+import { ERROR_MESSAGE, HTTP_STATUS } from "shared/constants";
+import { hashPassword } from "shared/utils/bcryptHelper";
+import { AuthError } from "shared/utils/error/authError";
+import { CustomError } from "shared/utils/error/customError";
+import { NotFoundError } from "shared/utils/error/notFounError";
+import { ValidationError } from "shared/utils/error/validationError";
+import { inject, injectable } from "tsyringe";
+
+@injectable()
+export class ForgotPasswordResetUsecase implements IForgotPasswordResetUsecase{
+
+    constructor(
+        @inject('ITokenService')
+        private _tokenService:ITokenService,
+
+        @inject('IUserRepository')
+        private _userRepository:IUserRespository,
+
+        @inject('IBlackListTokenRepository')
+        private _blackListTokenRepository:IBlackListTokenRepository
+    ){}
+    async execute(password:string,token:string):Promise<void>{
+        if(!password) throw new ValidationError("Password is required");
+        if(!token) throw new AuthError(HTTP_STATUS.UNAUTHORIZED,ERROR_MESSAGE.UNAUTHORIZED_ACCESS)
+
+        const payload:JwtPayload = this._tokenService.verifyForgotPasswordToken(token)
+        const {email} = payload
+        const fieldName=`forgotPassword:${email}`
+        const blacklisteToken=await this._blackListTokenRepository.getToken(fieldName)
+        if(blacklisteToken && blacklisteToken===token){
+            throw new CustomError(HTTP_STATUS.BAD_REQUEST,"Link has been used once")
+        }
+
+        //expiry calculation
+        const tokenExpiry=payload.exp as number
+        const currentTime = Math.floor(Date.now() / 1000);
+        const remainingTime = tokenExpiry-currentTime
+        console.log(remainingTime)
+
+        //checking is user exists
+        const user = await this._userRepository.findByEmail(email)
+        if(!user) throw new NotFoundError('user not found');
+
+
+        //updation credentials
+        const filter={email};
+        const hashedPassword =await hashPassword(password)
+        const update={password:hashedPassword}
+        const asyncOperations=[]
+
+        //updation
+        asyncOperations.push(this._userRepository.updateOne(filter,update))
+        //blacklisting
+        asyncOperations.push(this._blackListTokenRepository.blacklistToken(fieldName,remainingTime,token))
+        await this._userRepository.updateOne(filter,update)
+    }
+}
\ No newline at end of file
diff --git a/api/src/useCases/auth/registerUser.usecase.ts b/api/src/useCases/auth/registerUser.usecase.ts
index e3ac8f4..b1dd0d1 100644
--- a/api/src/useCases/auth/registerUser.usecase.ts
+++ b/api/src/useCases/auth/registerUser.usecase.ts
@@ -10,9 +10,10 @@ import {
   successResponseHandler,
 } from "shared/utils/successResponseHandler";
 import { CustomError } from "shared/utils/error/customError";
-import { EVENT_EMITTER_TYPE, HTTP_STATUS } from "shared/constants";
+import { EVENT_EMITTER_TYPE, HTTP_STATUS, MAIL_CONTENT_PURPOSE } from "shared/constants";
 import { hashPassword } from "shared/utils/bcryptHelper";
 import { eventBus } from "shared/eventBus";
+import { mailContentProvider } from "shared/mailContentProvider";
 
 @injectable()
 export class RegisterUserUsecase implements IRegisterUserUsecase {
@@ -52,18 +53,7 @@ export class RegisterUserUsecase implements IRegisterUserUsecase {
 
     asyncOperations.push(this._otpRepository.saveOtp(formData.email, otp));
 
-    const html =`
-              <div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
-                <h2 style="text-align: center; color: #333;">🔐 OTP Verification</h2>
-                <p style="font-size: 16px; color: #555;">Hi there,</p>
-                <p style="font-size: 16px; color: #555;">Use the following OTP to complete your signup process:</p>
-                <div style="text-align: center; margin: 30px 0;">
-                  <span style="display: inline-block; font-size: 24px; background-color: #4f46e5; color: white; padding: 12px 24px; border-radius: 8px; font-weight: bold; letter-spacing: 3px;">${otp}</span>
-                </div>
-                <p style="font-size: 14px; color: #888;">⚠️ This code is valid for 3 minutes. Please do not share it with anyone.</p>
-                <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— Meta Mentor Team</p>
-              </div>
-            `;
+    const html=mailContentProvider(MAIL_CONTENT_PURPOSE.OTP,otp)
 
 
     if (!userExists) {
diff --git a/api/src/useCases/auth/resendOtp.usecase.ts b/api/src/useCases/auth/resendOtp.usecase.ts
index cf3ce61..9b49e98 100644
--- a/api/src/useCases/auth/resendOtp.usecase.ts
+++ b/api/src/useCases/auth/resendOtp.usecase.ts
@@ -1,7 +1,8 @@
 import { IOtpRespository } from "entities/repositoryInterfaces/otp-repository.interface";
 import { IResendOtpUsecase } from "entities/usecaseInterfaces/auth/resendOtpUsecase.interface";
-import { EVENT_EMITTER_TYPE } from "shared/constants";
+import { EVENT_EMITTER_TYPE, MAIL_CONTENT_PURPOSE } from "shared/constants";
 import { eventBus } from "shared/eventBus";
+import { mailContentProvider } from "shared/mailContentProvider";
 import { ValidationError } from "shared/utils/error/validationError";
 import { inject, injectable } from "tsyringe";
 
@@ -26,18 +27,7 @@ export class ResendOtpUsecase implements IResendOtpUsecase{
 
         await this._otpRepository.saveOtp(email,otp);
 
-        const html =`
-              <div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
-                <h2 style="text-align: center; color: #333;">🔐 OTP Verification</h2>
-                <p style="font-size: 16px; color: #555;">Hi there,</p>
-                <p style="font-size: 16px; color: #555;">Use the following OTP to complete your signup process:</p>
-                <div style="text-align: center; margin: 30px 0;">
-                  <span style="display: inline-block; font-size: 24px; background-color: #4f46e5; color: white; padding: 12px 24px; border-radius: 8px; font-weight: bold; letter-spacing: 3px;">${otp}</span>
-                </div>
-                <p style="font-size: 14px; color: #888;">⚠️ This code is valid for 3 minutes. Please do not share it with anyone.</p>
-                <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— Meta Mentor Team</p>
-              </div>
-            `;
+        const html =mailContentProvider(MAIL_CONTENT_PURPOSE.OTP,otp)
         eventBus.emit(EVENT_EMITTER_TYPE.SENDMAIL,email,"Resend otp",html)
     }
 }
\ No newline at end of file
diff --git a/api/src/useCases/mentor/acceptMentorApplication.usecase.ts b/api/src/useCases/mentor/acceptMentorApplication.usecase.ts
index 5f0480b..d744698 100644
--- a/api/src/useCases/mentor/acceptMentorApplication.usecase.ts
+++ b/api/src/useCases/mentor/acceptMentorApplication.usecase.ts
@@ -1,10 +1,13 @@
 import { IMentorRepository } from "entities/repositoryInterfaces/mentorRepository.interface";
 import { IUserRespository } from "entities/repositoryInterfaces/user-repository.interface";
-import { IEmailService } from "entities/serviceInterfaces/email-service.interface";
+
 import { IAcceptMentorApplicationUsecase } from "entities/usecaseInterfaces/mentor/acceptMentorApplicationUsecase.interface";
-import { EVENT_EMITTER_TYPE, ROLES } from "shared/constants";
+
+import { EVENT_EMITTER_TYPE, MAIL_CONTENT_PURPOSE, ROLES } from "shared/constants";
 import { eventBus } from "shared/eventBus";
+import { mailContentProvider } from "shared/mailContentProvider";
 import { ValidationError } from "shared/utils/error/validationError";
+
 import { inject, injectable } from "tsyringe";
 
 @injectable()
@@ -16,8 +19,6 @@ export class AcceptMentorApplicationUsecase implements IAcceptMentorApplicationU
         @inject('IUserRepository')
         private _userRepository:IUserRespository,
 
-         @inject("IEmailService")
-        private _emailService: IEmailService
     ){}
 
     async execute(mentorId: string,email:string): Promise<void> {
@@ -36,25 +37,7 @@ export class AcceptMentorApplicationUsecase implements IAcceptMentorApplicationU
 
         await Promise.all(asyncOperations)
 
-        const html = `<div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #f9f9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
-                         <h2 style="text-align: center; color: #333;">🎉 Welcome Aboard, Mentor!</h2>
-                         <p style="font-size: 16px; color: #555;">Dear Mentor,</p>
-                         <p style="font-size: 16px; color: #555;">
-                           Congratulations! Your application to become a mentor on <strong>Meta Mentor</strong> has been officially accepted.
-                         </p>
-                         <p style="font-size: 16px; color: #555;">
-                           We are thrilled to have someone of your caliber join our community of educators and changemakers. Your knowledge, experience, and dedication will surely inspire many.
-                         </p>
-                         <div style="text-align: center; margin: 30px 0;">
-                           <span style="display: inline-block; font-size: 18px; background-color: #16a34a; color: white; padding: 12px 20px; border-radius: 8px; font-weight: bold;">
-                             You're officially a Meta Mentor! 🌟
-                           </span>
-                         </div>
-                         <p style="font-size: 14px; color: #666;">
-                           Your profile is now active, and students can soon start connecting with you. Get ready to make a difference!
-                         </p>
-                         <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— The Meta Mentor Team</p>
-                    </div>`
+        const html = mailContentProvider(MAIL_CONTENT_PURPOSE.MENTOR_ACCEPTANCE)
         
 
         eventBus.emit(EVENT_EMITTER_TYPE.SENDMAIL,email,"Accepted Application",html)
diff --git a/api/src/useCases/mentor/rejectMentorApplication.usecase.ts b/api/src/useCases/mentor/rejectMentorApplication.usecase.ts
index 5649742..7337ef3 100644
--- a/api/src/useCases/mentor/rejectMentorApplication.usecase.ts
+++ b/api/src/useCases/mentor/rejectMentorApplication.usecase.ts
@@ -1,9 +1,9 @@
 import { IMentorRepository } from "entities/repositoryInterfaces/mentorRepository.interface";
-import { IEmailService } from "entities/serviceInterfaces/email-service.interface";
 import { IRejectMentorApplicationUsecase } from "entities/usecaseInterfaces/mentor/rejectMentorApplication.interface";
-import { EVENT_EMITTER_TYPE } from "shared/constants";
+import { EVENT_EMITTER_TYPE, MAIL_CONTENT_PURPOSE } from "shared/constants";
 import { MentorUpdateDTO } from "shared/dto/mentorDTO";
 import { eventBus } from "shared/eventBus";
+import { mailContentProvider } from "shared/mailContentProvider";
 import { inject, injectable } from "tsyringe";
 
 
@@ -14,8 +14,6 @@ export class RejectMentorApplicationUsecase implements IRejectMentorApplicationU
         @inject('IMentorRepository')
         private _mentorRepository:IMentorRepository,
 
-         @inject("IEmailService")
-        private _emailService: IEmailService
     ){}
     async execute(mentorId:string,email:string,reason:string):Promise<void>{
 
@@ -24,28 +22,8 @@ export class RejectMentorApplicationUsecase implements IRejectMentorApplicationU
 
         await this._mentorRepository.updateOne(filter,update)
 
-        const html=`
-                     <div style="max-width: 500px; margin: auto; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 30px; background-color: #fff9f9; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
-                      <h2 style="text-align: center; color: #d32f2f;">❌ Application Update</h2>
-                      <p style="font-size: 16px; color: #555;">Dear Applicant,</p>
-                      <p style="font-size: 16px; color: #555;">
-                        Thank you for your interest in becoming a mentor with <strong>Meta Mentor</strong>. After carefully reviewing your application, we regret to inform you that it has not been approved at this time.
-                      </p>
-                      <p style="font-size: 16px; color: #555;">
-                        Please know that this decision was not easy. While we truly value your effort and enthusiasm, we believe that there may be other ways for you to grow and engage with our community in the future.
-                      </p>
-                      <div style="text-align: center; margin: 30px 0;">
-                        <span style="display: inline-block; font-size: 16px; background-color: #fef3c7; color: #92400e; padding: 10px 20px; border-radius: 6px;">
-                          We encourage you to apply again after gaining more experience or refining your profile.<br/>
-                          Reason : ${reason}
-                        </span>
-                      </div>
-                      <p style="font-size: 14px; color: #666;">
-                        We sincerely appreciate your interest and wish you continued success in all your endeavors.
-                      </p>
-                      <p style="font-size: 14px; color: #aaa; text-align: center; margin-top: 40px;">— The Meta Mentor Team</p>
-                     </div>
-                    `
+        const html = mailContentProvider(MAIL_CONTENT_PURPOSE.MENTOR_REJECTION,reason)
+        
         eventBus.emit(EVENT_EMITTER_TYPE.SENDMAIL,email,"Application Rejected",html)
     }
 }
\ No newline at end of file
diff --git a/client/.gitignore b/client/.gitignore
index a547bf3..a120b79 100644
--- a/client/.gitignore
+++ b/client/.gitignore
@@ -8,6 +8,7 @@ pnpm-debug.log*
 lerna-debug.log*
 
 node_modules
+.env
 dist
 dist-ssr
 *.local
diff --git a/client/src/components/common/TableComponent.tsx b/client/src/components/common/TableComponent.tsx
index f6a4771..2027eee 100644
--- a/client/src/components/common/TableComponent.tsx
+++ b/client/src/components/common/TableComponent.tsx
@@ -7,10 +7,12 @@ import {
   TableHeader,
   TableRow,
 } from "@/components/ui/table";
+import type { TableDetailsType } from "@/types/tableDataTypes";
+import type { ReactNode } from "react";
 
 type Prop = {
     tableHeaders:string[],
-    tableBody:any[]
+    tableBody:TableDetailsType[]
 }
 const TableComponent = ({tableHeaders,tableBody}:Prop) => {
   return (
@@ -24,9 +26,9 @@ const TableComponent = ({tableHeaders,tableBody}:Prop) => {
       <TableBody>
         {
           tableBody.map(row=>(
-              <TableRow  className="text-center">
-                  {row.content.map((data:any)=>(
-                      <TableCell>{data}</TableCell>
+              <TableRow key={row.id}  className="text-center">
+                  {row.content.map((data:(number|string|ReactNode),index:number)=>(
+                      <TableCell key={index}>{data}</TableCell>
                   ))}
           </TableRow>
           ))
diff --git a/client/src/config/axiosConfig/axiosInterceptor.ts b/client/src/config/axiosConfig/axiosInterceptor.ts
index 85949b7..ccec9c8 100644
--- a/client/src/config/axiosConfig/axiosInterceptor.ts
+++ b/client/src/config/axiosConfig/axiosInterceptor.ts
@@ -13,7 +13,7 @@ export function setUpInterceptors(instance: AxiosInstance) {
 
         if (error.response?.status === 401 && !originalRequest.url.includes('/auth/refresh') && !originalRequest._retry) {
             try{
-                console.log(error.response.status);
+                console.log("error in access token",error.response.status);
                 originalRequest._retry = true;
                 await instance.post(`${import.meta.env.VITE_API_USER_BASE_URL}/auth/refresh`)
                 return instance(originalRequest)
diff --git a/client/src/pages/auth/ForgotPassword/ForgotSuccess.tsx b/client/src/pages/auth/ForgotPassword/ForgotSuccess.tsx
new file mode 100644
index 0000000..63125c0
--- /dev/null
+++ b/client/src/pages/auth/ForgotPassword/ForgotSuccess.tsx
@@ -0,0 +1,16 @@
+const ForgotEmailSuccess = () => {
+  return (
+    <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
+      <div className="bg-white shadow-lg rounded-2xl p-8 max-w-md w-full text-center">
+        <div className="text-green-500 text-5xl mb-4">✅</div>
+        <h2 className="text-2xl font-bold text-gray-800 mb-2">Check Your Email</h2>
+        <p className="text-gray-600 mb-4">
+          A verification link has been sent to your registered email address. Please check your inbox and follow the link to verify your account.
+        </p>
+        <p className="text-sm text-gray-500">Didn't receive the email? Check your spam folder or <a href="#" className="text-blue-600 underline">resend</a>.</p>
+      </div>
+    </div>
+  );
+};
+
+export default ForgotEmailSuccess;
diff --git a/client/src/pages/auth/ForgotPassword/PasswordReset.tsx b/client/src/pages/auth/ForgotPassword/PasswordReset.tsx
new file mode 100644
index 0000000..f281b09
--- /dev/null
+++ b/client/src/pages/auth/ForgotPassword/PasswordReset.tsx
@@ -0,0 +1,107 @@
+import React, { useState } from 'react'
+import { Input } from "@/components/ui/input"
+import { Label } from "@/components/ui/label"
+import { Button } from '@/components/ui/button'
+import { formDataValidation } from '@/utils/validations/formDataValidation'
+import './forgotPassword.css'
+import {AnimatePresence, motion} from 'framer-motion'
+import type { AuthFormErrorsType } from '@/types/authTypes'
+import { useNavigate, useParams } from 'react-router-dom'
+import { useMutation } from '@tanstack/react-query'
+import { resetPassword } from '@/services/authService.ts/authApi'
+import { toast } from 'sonner'
+import LoadingSpinnerComponent from '@/components/common/LoadingSpinnerComponent'
+
+const PasswordReset = () => {
+    const [formData,setFormData] = useState({
+      password:'',
+      confirmPwd:''
+    })
+    const [error,setError]=useState<Pick<AuthFormErrorsType,'password'|'confirmPwd'>>({})
+    const navigate=useNavigate()
+    const {token} = useParams()
+
+    const {mutate:resetPasswordMutation,isPending:resetPasswordLoading}=useMutation({
+      mutationFn:resetPassword,
+      onSuccess:(response)=>{
+        toast.success(response.message)
+        navigate('/login')
+      },
+      onError:(error)=>{
+        toast.error(error.message)
+      }
+    })
+
+    const handleChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
+      setFormData((prev)=>({...prev,[e.target.name]:e.target.value}))
+    }
+
+    const handleSubmit=()=>{
+       const error = formDataValidation(formData);
+       if(Object.values(error).length>0){
+          setError(error)
+          console.log
+          setTimeout(()=>{
+            setError({})
+          },3000)
+       }
+
+       const password = formData.password
+       resetPasswordMutation({password,token:token as string})
+    }
+
+  return (
+   <div className='outer-div flex items-center justify-center h-screen'>
+        <div className='p-8 rounded-lg flex flex-col gap-10 w-96'>
+          <h1 className='text-3xl font-semibold text-center text-[#E63946]'>Password Reset</h1>
+
+          <form action="" className='flex flex-col gap-9'>
+
+            <div className='flex flex-col gap-2'>
+               <Label htmlFor="email sample">Password</Label>
+               <div className='relative overflow-hidden border rounded-lg'>
+                   <AnimatePresence>
+                   {error.password &&
+                   <motion.div 
+                   initial={{x:'-100%'}}
+                   animate={{x:0}}
+                   style={{ fontSize: `70%`}}
+                   exit={{x:'-100%'}}
+                   transition={{duration:1}}
+                   className={`h-full text-white flex justify-center items-center font-semibold w-full absolute bg-red-400 rounded-lg p-1 text-center`}>
+                     {error.password}
+                   </motion.div>
+                   }
+                   </AnimatePresence>
+                  <Input onChange={handleChange} className={`w-full  ${error.password && "border-red-400 border-2"} `} name='password' type="password"/>
+               </div>
+            </div>
+
+            <div className='flex flex-col gap-2'>
+                <Label htmlFor="email">Re Enter Password</Label>
+                <div className='relative overflow-hidden border rounded-lg'>
+                  <AnimatePresence>
+                  {error.confirmPwd &&
+                  <motion.div 
+                  initial={{x:'-100%'}}
+                  animate={{x:0}}
+                  style={{ fontSize: `70%`}}
+                  exit={{x:'-100%'}}
+                  transition={{duration:1}}
+                  className={`h-full text-white flex justify-center items-center font-semibold w-full absolute bg-red-400 rounded-lg p-1 text-center`}>
+                    {error.confirmPwd}
+                  </motion.div>
+                  }
+                  </AnimatePresence>
+                  <Input onChange={handleChange} className={`w-full  ${error.confirmPwd && "border-red-400 border-2"} `} name='confirmPwd' type="password"/>
+                </div>
+            </div>
+
+          </form>
+          <Button disabled={resetPasswordLoading} onClick={handleSubmit} className='bg-[#E63946] text-white py-2 rounded-lg hover:bg-[#dc2f3c] transition-colors'>{resetPasswordLoading?<LoadingSpinnerComponent/>:"Submit"}</Button>
+        </div>
+    </div>
+  )
+}
+
+export default PasswordReset
diff --git a/client/src/pages/auth/ForgotPassword/SendEmail.tsx b/client/src/pages/auth/ForgotPassword/SendEmail.tsx
new file mode 100644
index 0000000..0d882b5
--- /dev/null
+++ b/client/src/pages/auth/ForgotPassword/SendEmail.tsx
@@ -0,0 +1,51 @@
+import { Button } from "@/components/ui/button"
+import { Input } from "@/components/ui/input"
+import { Label } from "@/components/ui/label"
+import { forgotPasswordSendMail } from "@/services/authService.ts/authApi"
+import { useMutation } from "@tanstack/react-query"
+import { useState } from "react"
+import { useNavigate } from "react-router-dom"
+import { toast } from "sonner"
+
+const SendEmail = () => {
+
+    const [email,setEmail]=useState<string>("")
+    const navigate = useNavigate()
+
+    const mutation = useMutation({
+        mutationFn:forgotPasswordSendMail,
+        onSuccess:(response)=>{
+            toast.success(response.message)
+            navigate('/forgotPassword/success')
+        },
+        onError:(error)=>{
+            toast.error(error.message)
+        }
+    })
+
+    const handleChange=(e:React.ChangeEvent<HTMLInputElement>)=>{        
+        setEmail(e.target.value)
+    }
+
+    const handleSubmit=()=>{
+        if(!email.trim()) return
+        mutation.mutate(email)
+    }
+  return (
+    <div className='flex items-center justify-center h-screen'>
+
+        <div className='p-8 rounded-lg flex flex-col gap-10 w-96'>
+          <h1 className='text-3xl font-semibold text-center text-[#E63946]'>EMAIL VERIFICATION</h1>
+          <form action="" className='flex flex-col gap-9'>
+            <div className='flex flex-col gap-2'>
+            <Label htmlFor="email">Email</Label>
+            <Input onChange={handleChange} className='w-full' name='email'/>
+            </div>
+          </form>
+          <Button onClick={handleSubmit} className='bg-[#E63946] text-white py-2 rounded-lg hover:bg-[#dc2f3c] transition-colors'>Submit</Button>
+        </div>
+    </div>
+  )
+}
+
+export default SendEmail
diff --git a/client/src/pages/auth/ForgotPassword/forgotPassword.css b/client/src/pages/auth/ForgotPassword/forgotPassword.css
new file mode 100644
index 0000000..abad9c5
--- /dev/null
+++ b/client/src/pages/auth/ForgotPassword/forgotPassword.css
@@ -0,0 +1,9 @@
+.input-div div{
+    transform: translate(100%,0px);
+    transition: transform 0.5s ease-in-out;
+}
+
+.input-div:hover div{
+    transform: translate(0px,0px);
+}
+
diff --git a/client/src/pages/auth/Login.tsx b/client/src/pages/auth/Login.tsx
index 286f08f..34e20e6 100644
--- a/client/src/pages/auth/Login.tsx
+++ b/client/src/pages/auth/Login.tsx
@@ -4,7 +4,7 @@ import { Label } from '@/components/ui/label'
 import { login } from '@/services/authService.ts/authApi'
 import { useMutation } from '@tanstack/react-query'
 import { useState } from 'react'
-import { useNavigate } from 'react-router-dom'
+import { Link, useNavigate } from 'react-router-dom'
 import { toast } from 'sonner'
 import { useUserStore } from '@/zustand/userStore';
 
@@ -56,10 +56,11 @@ const Login = () => {
             <div className='flex flex-col gap-2'>
             <Label htmlFor="password">Password</Label>
             <Input onChange={handleChange} type="password"  className='w-full' name='password'/>
+            <p onClick={()=>navigate('/forgotPassword/sendMail')} className='text-muted-foreground text-xs font-medium hover:underline cursor-pointer'>Forgot password?</p>
             </div>
           </form>
           <Button onClick={handleSubmit} className='bg-[#E63946] text-white py-2 rounded-lg hover:bg-[#dc2f3c] transition-colors'>Login</Button>
-          <p className='text-center text-sm'>Don't have an account? <a href="/signup" className='text-[#E63946] hover:underline'>Sign Up</a></p>
+          <p className='text-center text-sm'>Don't have an account? <Link to="/signup" className='text-[#E63946] hover:underline'>Sign Up</Link></p>
         </div>
     </div>
   )
diff --git a/client/src/pages/auth/Otp.tsx b/client/src/pages/auth/Otp.tsx
index 0a6630e..81f020b 100644
--- a/client/src/pages/auth/Otp.tsx
+++ b/client/src/pages/auth/Otp.tsx
@@ -20,8 +20,12 @@ const Otp = () => {
       return storedTimer ? parseInt(storedTimer) : 60
     });
 
-    const location = useLocation()
     const navigate = useNavigate();
+
+    const location = useLocation()
+    const email:string=location?.state?.email
+    if(!email) return <Navigate to="/"/>
+
     
     const {mutate:verifyOtpMutation,isPending:verifyOtpLoading} = useMutation({
         mutationFn:verifyOtp,
@@ -59,13 +63,15 @@ const Otp = () => {
         })
       },1000)
 
-      return ()=>clearInterval(timerInterval)
+      return ()=>{
+        clearInterval(timerInterval)
+        localStorage.removeItem('timer')
+      }
+
     },[otpSend])
 
     
-    const email:string = location?.state?.email
-    console.log(email)
-    if(!email) return <Navigate to="/"/>
+    
 
     const handleOtpSubmit=async()=>{
         verifyOtpMutation({email,otp})
diff --git a/client/src/pages/auth/Signup.tsx b/client/src/pages/auth/Signup.tsx
index 01574a5..b717e3e 100644
--- a/client/src/pages/auth/Signup.tsx
+++ b/client/src/pages/auth/Signup.tsx
@@ -12,14 +12,14 @@ import type { AuthFormErrorsType, AuthFormType } from '@/types/authTypes';
 
 //hooks
 import { useState } from 'react';
-import { useNavigate } from 'react-router-dom';
+import { Link, useNavigate } from 'react-router-dom';
 import { useMutation } from '@tanstack/react-query';
 
 
 //utils
 import { toast } from 'sonner';
 import countries from 'world-countries';
-import { signupValidation } from '@/utils/validations/signupValidations';
+import { formDataValidation } from '@/utils/validations/formDataValidation';
 
 
 const Signup = () => {
@@ -67,7 +67,7 @@ const Signup = () => {
   const handleSubmit = async() => {
 
       const {country,gender,...rest} = formData;
-      const validationErrors = signupValidation(rest);
+      const validationErrors = formDataValidation(rest);
 
       if (Object.keys(validationErrors).length > 0) {
         setErrors(validationErrors);
@@ -142,7 +142,7 @@ const Signup = () => {
           </form>
           
           <Button disabled={mutation.isPending} onClick={handleSubmit} className='signupButton bg-[#E63946] text-white py-2 rounded-lg hover:bg-[#dc2f3c] transition-colors'>{mutation.isPending?<span className="loader"></span>:"Signup"}</Button>
-          <p className='text-center text-sm'>Already have an account? <a href="/login" className='text-[#E63946] hover:underline'>Login</a></p>
+          <p className='text-center text-sm'>Already have an account? <Link to="/login" className='text-[#E63946] hover:underline'>Login</Link></p>
         </div>
     </div>
   )
diff --git a/client/src/routes/UserRoutes.tsx b/client/src/routes/UserRoutes.tsx
index d58516b..8481e8c 100644
--- a/client/src/routes/UserRoutes.tsx
+++ b/client/src/routes/UserRoutes.tsx
@@ -4,6 +4,10 @@ import Signup from "@/pages/auth/Signup"
 import LandingPage from "@/pages/user/LandingPage"
 import { Routes,Route } from "react-router-dom"
 import { PublicOnlyRoute } from "./protectedRoutes/PublicOnlyRoute"
+import SendEmail from "@/pages/auth/ForgotPassword/SendEmail"
+import ForgotEmailSuccess from "@/pages/auth/ForgotPassword/ForgotSuccess"
+import PasswordReset from "@/pages/auth/ForgotPassword/PasswordReset"
+
 const UserRoutes = () => {
   return (
     <div>
@@ -11,6 +15,9 @@ const UserRoutes = () => {
             <Route path="/login" element={<PublicOnlyRoute><Login/></PublicOnlyRoute>}/>
             <Route path="/signup" element={<PublicOnlyRoute><Signup/></PublicOnlyRoute>}/>
             <Route path="/otp" element={<Otp/>}/>
+            <Route path="/forgotPassword/sendMail" element={<SendEmail/>}/>
+            <Route path="/forgotPassword/success" element={<ForgotEmailSuccess/>}/>
+            <Route path="/forgotPassword/reset/:token" element={<PasswordReset/>}/>
             <Route path="/" element={<LandingPage/>}/>
         </Routes>
     </div>
diff --git a/client/src/routes/protectedRoutes/ProtectedRoute.tsx b/client/src/routes/protectedRoutes/ProtectedRoute.tsx
index 425fe3e..440dc82 100644
--- a/client/src/routes/protectedRoutes/ProtectedRoute.tsx
+++ b/client/src/routes/protectedRoutes/ProtectedRoute.tsx
@@ -7,7 +7,7 @@ import { Navigate, Outlet } from "react-router-dom";
 const ProtectedRoute = ({allowedRoles,navitageTo='/'}:{allowedRoles:ROLES[],navitageTo?:string}) => {
 
     const {user} = useUserStore();
-
+    console.log(user)
     if(!user) return <Navigate to="/" replace/>
 
     if(!allowedRoles.includes(user.role)){
diff --git a/client/src/services/authService.ts/authApi.ts b/client/src/services/authService.ts/authApi.ts
index aa2d9bf..3c56f7a 100644
--- a/client/src/services/authService.ts/authApi.ts
+++ b/client/src/services/authService.ts/authApi.ts
@@ -8,7 +8,7 @@ export const signup = async (formData:Omit<AuthFormType , "confirmPwd">):Promise
         const response = await authAxiosInstance.post('/signup', formData);
         return response.data;
     }catch(error:any) {
-        throw error.response.data
+        throw error?.response.data || error
     }
 }
 
@@ -51,6 +51,23 @@ export const login = async ({email,password}:{email:string,password:string}):Pro
 // }
 
 
+export const forgotPasswordSendMail=async(email:string):Promise<Omit<ApiResponseType<undefined>,'data'>>=>{
+    try{
+        const response = await authAxiosInstance.post('/forgotPassword/mail',{email})
+        return response.data;
+    }
+    catch(error:any){
+        throw error?.response.data || error
+    }
+}
 
-
+export const resetPassword=async({password,token}:{password:string,token:string}):Promise<Omit<ApiResponseType<undefined>,'data'>>=>{
+    try{
+        const response = await authAxiosInstance.patch('/forgotPassword/reset',{password,token})
+        return response.data;
+    }
+    catch(error:any){
+        throw error?.response.data || error
+    }
+}
 
diff --git a/client/src/utils/validations/signupValidations.tsx b/client/src/utils/validations/formDataValidation.tsx
similarity index 91%
rename from client/src/utils/validations/signupValidations.tsx
rename to client/src/utils/validations/formDataValidation.tsx
index bc225c6..01706b2 100644
--- a/client/src/utils/validations/signupValidations.tsx
+++ b/client/src/utils/validations/formDataValidation.tsx
@@ -1,12 +1,12 @@
 import type { AuthFormType,AuthFormErrorsType } from "@/types/authTypes";
 
 
-export const signupValidation = (formData:Omit<AuthFormType,'country'|'gender'>):AuthFormErrorsType => {
+export const formDataValidation = (formData:Partial<Omit<AuthFormType,'country'|'gender'>>):AuthFormErrorsType => {
 
     const errors:AuthFormErrorsType={}
     for(const i in formData) {
         const key = i as keyof typeof formData;
-        const value = formData[key];
+        const value = formData[key] as string;
 
         if (key==='name' && (value==="" || value===null)) {
                 errors[key] = `${key} is required`
-- 
2.37.3.windows.1

